param memcpy_params: comptime_struct;
param c2d_params: comptime_struct;

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);
const mpi_x = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.x });
const mpi_y = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.y });

const w = @get_rectangle().width;  
const h = @get_rectangle().height; 

var send = @zeros([1]f32);
var recv = @zeros([1]f32);
var recv_x = @zeros([w]f32);
var recv_y = @zeros([h]f32);

var re_result: f32;
var re_count: u16;
var px: u16;
var py: u16;

var datax: [0] f32;
var datax_ptr: [*] f32 = &datax;
var datax_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{0} -> datax[i] });

var datay: [0] f32;
var datay_ptr: [*] f32 = &datay;
var datay_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{0} -> datay[i] });

var result: [0] f32;
var result_ptr: [*] f32 = &result;

var a = @zeros([0] f32);
var a_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{0} -> a[i] });

var re : f32;

const event1_id:                local_task_id = @get_local_task_id(9);
const reduce_id:                local_task_id = @get_local_task_id(10);
const reduce_y_id:              local_task_id = @get_local_task_id(11);
const bcas_x_id:                local_task_id = @get_local_task_id(12);
const bcas_y_id:                local_task_id = @get_local_task_id(13);
const assign_id:                local_task_id = @get_local_task_id(14);
const event2_id:                local_task_id = @get_local_task_id(15);
const exit_id:                  local_task_id = @get_local_task_id(16);

fn main() void{

    mpi_x.init();
    mpi_y.init();

    px = mpi_x.pe_id;
    py = mpi_y.pe_id;
    re_result = 0.0;
    re_count = 1;

    re = 0.0;

    @activate(event1_id);
}

fn isin(x : f32, y : f32) f32{
    return 1;
    return 0;
}
                            

task reduce() void {
    var tmp:f32 = 0.0;

    if (re_count == 1){
        for (a) |data|{
            tmp += data;
        }
    }

    send[0] = tmp;
    var send_buf = @ptrcast([*]u32, &send);
    var recv_buf = @ptrcast([*]u32, &recv_x);

    mpi_x.gather(0, send_buf, recv_buf, 1, reduce_y_id);
}

task reduce_y() void {

    if (px == 0){
        var tmp :f32 = 0.0;
        for (recv_x) |i|{
            tmp += i;
        }
        send[0] = tmp;
    }

    var send_buf = @ptrcast([*]u32, &send);
    var recv_buf = @ptrcast([*]u32, &recv_y);

    mpi_y.gather(0, send_buf, recv_buf, 1, bcas_x_id);
}

task bcas_x() void{

    var tmp : f32 = 0.0;

    if(px == 0){
        if(py == 0){

            for(recv_y) |i|{
                tmp += i;
            }

            send[0] = tmp;
        }
    }

    send[0] = tmp;
    var send_buf = @ptrcast([*]u32, &send);
    var recv_buf = @ptrcast([*]u32, &recv);

    if (0 == px) {
        mpi_x.broadcast(0, send_buf, 1, bcas_y_id);
    } else {
        mpi_x.broadcast(0, recv_buf, 1, bcas_y_id);
    }
}

task bcas_y() void{

    if(px != 0){
        send[0] = recv[0];
    }

    var send_buf = @ptrcast([*]u32, &send);
    var recv_buf = @ptrcast([*]u32, &recv);

    if (0 == py) {
        mpi_y.broadcast(0, send_buf, 1,assign_id);
    } else {
        mpi_y.broadcast(0, recv_buf, 1,assign_id);
    }
}

task assign() void{

    re_result = recv[0];

    if(px == 0){
        if(py == 0){
            re_result = send[0];
        }
    }

    if (re_count == 1){
        re_count += 1;
        @activate(event2_id);
    }
}

task event1() void{

    @map(isin, datax_dsd, datay_dsd,a_dsd);

    @activate(reduce_id);
}

task event2() void{

    re = re_result;
    re = re / 5.0 * 4;

    @activate(exit_id);
}

task exit() void {

    if(px == 0){
        if(py == 0){
            result[0] = re;
        }
    }

    sys_mod.unblock_cmd_stream();
}

comptime{
    @export_symbol(datax_ptr, "datax");
    @export_symbol(datay_ptr, "datay");
    @export_symbol(result_ptr, "result");
    @export_symbol(main);
    @bind_local_task(event1, event1_id);
    @bind_local_task(reduce, reduce_id);
    @bind_local_task(reduce_y, reduce_y_id);
    @bind_local_task(bcas_x, bcas_x_id);
    @bind_local_task(bcas_y, bcas_y_id);
    @bind_local_task(assign, assign_id);
    @bind_local_task(event2, event2_id);
    @bind_local_task(exit, exit_id);
}